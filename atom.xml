<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Confessions of a Wall Street Programmer]]></title>
  <link href="http://btorpey.github.io/atom.xml" rel="self"/>
  <link href="http://btorpey.github.io/"/>
  <updated>2014-04-29T21:12:06-04:00</updated>
  <id>http://btorpey.github.io/</id>
  <author>
    <name><![CDATA[Bill Torpey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Picture is Worth 1K Words]]></title>
    <link href="http://btorpey.github.io/blog/2014/04/29/a-picture-is-worth-1k-words/"/>
    <updated>2014-04-29T19:23:07-04:00</updated>
    <id>http://btorpey.github.io/blog/2014/04/29/a-picture-is-worth-1k-words</id>
    <content type="html"><![CDATA[<p>You know those mutiple-choice tests that put you in one of four quadrants based
on your answers to a bunch of seemingly irrelevant questions? We&rsquo;ve all taken
them, and if you&rsquo;re like me they&rsquo;re kind of like reading your horoscope &mdash; it
all seems so right and true when you&rsquo;re reading it, but you wonder if it would
still seem just as right and true if the horoscopes got jumbled at random?</p>

<p>Well, I took one of these a while back that wasn&rsquo;t like that &mdash; it was the &ldquo;Learning-Style Inventory&rdquo;
test, and what it said about me is that I&rsquo;m waaaayyy over at the end of the
scale when it comes to visual thinking. That gave me an insight into the way my
brain works that I&rsquo;ve found really helpful since. So, this next bit was right up my alley,
but I&rsquo;m guessing you&rsquo;ll like it too.</p>

<p>We read a lot lately about NUMA architecture and how it presents a fundamental
change in the way we approach writing efficient code: it&rsquo;s no longer about the
CPU, it&rsquo;s all about RAM. We all nod and say &ldquo;Sure, I get that!&rdquo;  Well, I thought
I got it too, but until I saw <a href="http://www.overbyte.com.au/misc/Lesson3/CacheFun.html">this web page</a>,
I really didn&rsquo;t.</p>

<p><a href=http://www.overbyte.com.au/misc/Lesson3/CacheFun.html><img src=http://overbyte.com.au/wp-content/uploads/2012/01/InteractiveMemAccess-620x424.png></a></p>

<p>See the full discussion at <a href="http://overbyte.com.au/index.php/overbyte-blog/entry/optimisation-lesson-3-the-memory-bottleneck">http://overbyte.com.au/index.php/overbyte-blog/entry/optimisation-lesson-3-the-memory-bottleneck</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using clang's Address Sanitizer (without clang)]]></title>
    <link href="http://btorpey.github.io/blog/2014/03/27/using-clangs-address-sanitizer/"/>
    <updated>2014-03-27T08:30:22-04:00</updated>
    <id>http://btorpey.github.io/blog/2014/03/27/using-clangs-address-sanitizer</id>
    <content type="html"><![CDATA[<p>Valgrind has been an indispensable tool for C/C++ programmers for a long
time, and I&rsquo;ve used it quite happily &mdash; it&rsquo;s a tremendous tool for doing dynamic
analysis of program behavior at run time. valgrind<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> can detect reads of
uninitialized memory, heap buffer overruns, memory leaks, and other errors that
can be difficult or impossible to find by eyeballing the code, or by static
analysis tools.  But that comes with a price, which in some cases can be quite steep, and some new
tools promise to provide some or all of the functionality valgrind provides without the drawbacks.</p>

<!--more-->


<p>For one thing, valgrind can
be <em>extremely</em> slow.  That is an unavoidable side-effect of one of valgrind&rsquo;s
strengths, which is that it doesn&rsquo;t require that the program under test be
instrumented beforehand &mdash; it can analyze any executable (including shared
objects) &ldquo;right out of the box&rdquo;.  That works because valgrind effectively
emulates the hardware the program runs on, but that leads to a potential
problem: valgrind instruments <em>all</em> the code, including shared objects &mdash;and
that includes third-party code (e.g., libraries, etc.) that you may not have any
control over.</p>

<p>In my case, that ended up being a real problem.  The main reason
being that a significant portion of the application I work with is hosted in a
JVM (because it runs in-proc to a Java-based FIX engine, using a thin JNI
layer).  The valgrind folks say that the slowdown using their tool can be up to
20x, but it seemed like more, because the entire JVM was being emulated.</p>

<p>And, because valgrind emulates <em>everything</em>, it also detects and reports
problems in the JVM itself.  Well, it turns out that the JVM plays a lot of
tricks that valgrind doesn&rsquo;t like, and the result is a flood of complaints that
overwhelm any potential issues in the application itself.</p>

<p>So, I was very interested in learning about a similar technology that promised
to address some of these problems.  Address Sanitizer (Asan from here on) was
originally developed as part of the clang project, and largely by folks at Google.
They took a different approach: while valgrind emulates the machine at run-time, Asan works by instrumenting
the code at compile-time.</p>

<p>That helps to solve the two big problems that I was having with valgrind: its
slowness, and the difficulty of excluding third-party libraries from the
analysis.</p>

<h2>Asan with clang</h2>

<p>Since I was already building the application using clang for its excellent
diagnostics and static analysis features, I thought it would be relatively
straightforward to introduce the Asan feature into the build.  Turns out there
is a bump in that road: clang&rsquo;s version of Asan is supplied only as a
static library that is linked into the main executable.  And while it should be
possible to re-jigger things to make it work as a shared library, that would
turn into a bit of science project.  That, and the fact that the wiki page discussing it
(<a href="http://code.google.com/p/address-sanitizer/wiki/AsanAsDso">http://code.google.com/p/address-sanitizer/wiki/AsanAsDso</a>) didn&rsquo;t sound
particularly encouraging (&ldquo;however the devil is in the detail&rdquo; &mdash; uhh, thanks, no).</p>

<p>Rats!  However, the wiki page
did mention that there was a version of Asan that worked with gcc, and that
version apparently did support deployment as a shared object.  So, I decided to give that a try&hellip;</p>

<h2>Asan with gcc</h2>

<p>It turns out that the gcc developers haven&rsquo;t been sitting still &mdash; in
fact, it looks like there is a bit of a healthy rivalry between the clang and gcc
folks, and that&rsquo;s a good thing for you and me.  Starting with version 4.8 of the
gcc collection, Asan is available with gcc as well.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Getting the latest gcc version (4.8.2 as of this writing), building and
installing it was relatively straight-forward.  By default, the source build
installs into /usr/local, so it can co-exist nicely with the native gcc for the
platform (in the case of Red Hat/CentOS 6.5, that is the relatively ancient gcc
4.4 branch).</p>

<h2>Building with Asan</h2>

<p>Including support for Asan in your build is pretty simple &mdash; just include the <code>-fsanitize=address</code>
flag in both the compile and link step.  (Note that this means you need to invoke the linker via the compiler
driver, rather than directly.  In practice, this means that the executable you specify for the link step should be
g++ (or gcc), not ld).</p>

<p>While not strictly required, it&rsquo;s also a very good idea to include the <code>-fno-omit-frame-pointer</code> flag
in the compile step.  This will prevent the compiler from optimizing away the frame pointer (ebp) register.  While
disabling any optimization might seem like a bad idea, in this case the performance benefit is likely minimal at best<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, but the
inability to get accurate stack frames is a show-stopper.</p>

<h2>Running with Asan</h2>

<p>If you&rsquo;re checking an executable that you build yourself, the prior steps are all you need &mdash; libasan.so will get linked
into your executable by virtue of the <code>-fsanitize=address</code> flag.</p>

<p>In my case, though, the goal was to be able to instrument code running in the JVM.  In this case, I had to force libasan.so
into the executable at runtime using <code>LD_PRELOAD</code>, like so:</p>

<p><code>LD_PRELOAD=/usr/local/lib64/libasan.so.0 java ...</code></p>

<p>And that&rsquo;s it!</p>

<h2>Tailoring Asan</h2>

<p>There are a bunch of options available to tailor the way Asan works: at compile-time you can supply a &ldquo;blacklist&rdquo; of functions that
Asan should NOT instrument, and at run-time you can further customize Asan using the <code>ASAN_OPTIONS</code> environment variable, which
is discussed <a href="http://code.google.com/p/address-sanitizer/wiki/Flags">here</a>.</p>

<p>By default, Asan is silent, so you may not be certain that it&rsquo;s actually working unless it aborts with an error, which would look like
<a href="http://en.wikipedia.org/wiki/AddressSanitizer#Examples" title="">one of these</a>.</p>

<p>You can check that Asan is linked in to your executable using ldd:</p>

<pre>
$ ldd a.out
    linux-vdso.so.1 =>  (0x00007fff749ff000)
    libasan.so.0 => /usr/local/lib64/libasan.so.0 (0x00007f57065f7000)
    libstdc++.so.6 => /usr/local/lib64/libstdc++.so.6 (0x00007f57062ed000)
    libm.so.6 => /lib64/libm.so.6 (0x0000003dacc00000)
    libgcc_s.so.1 => /usr/local/lib64/libgcc_s.so.1 (0x00007f57060bd000)
    libc.so.6 => /lib64/libc.so.6 (0x0000003dad000000)
    libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003dad800000)
    libdl.so.2 => /lib64/libdl.so.2 (0x0000003dad400000)
    /lib64/ld-linux-x86-64.so.2 (0x0000003dac800000)
</pre>


<p>You can also up the default verbosity level of Asan to get an idea of what is going on at run-time:</p>

<p><code>export ASAN_OPTIONS="verbosity=1:..."</code></p>

<p>If you&rsquo;re using <code>LD_PRELOAD</code> to inject Asan into an executable that was not built
using Asan, you may see output that looks like the following:</p>

<pre>
==25140== AddressSanitizer: failed to intercept 'memset'
==25140== AddressSanitizer: failed to intercept 'strcat'
==25140== AddressSanitizer: failed to intercept 'strchr'
==25140== AddressSanitizer: failed to intercept 'strcmp'
==25140== AddressSanitizer: failed to intercept 'strcpy'
==25140== AddressSanitizer: failed to intercept 'strlen'
==25140== AddressSanitizer: failed to intercept 'strncmp'
==25140== AddressSanitizer: failed to intercept 'strncpy'
==25140== AddressSanitizer: failed to intercept 'pthread_create'
==25140== AddressSanitizer: libc interceptors initialized
</pre>


<p>Don&rsquo;t worry &mdash; it turns out that is a bogus warning related to running Asan as a shared object.  Unfortunately, the Asan
developers don&rsquo;t seem to want to fix this (<a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58680">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58680</a>).</p>

<h2>Conclusion</h2>

<p>So, how did this all turn out?  Well, it&rsquo;s pretty early in the process, but Asan
has already caught a memory corruption problem that would have been extremely
difficult to track down otherwise.  (Short version is that due to some
unintended name collissions between shared libraries, we were trying to put 10
pounds of bologna in a 5 pound sack.  Or, as one of my colleagues more accurately pointed out, 8 pounds
of bologna in a 4 pund sack :&ndash;)</p>

<p>valgrind is still an extremely valuable tool, especially because of its
convenience and versatility; but in certain edge cases Asan can bring things to
the table, like speed and selectivity, that make it the better choice.</p>

<h2>Postscript </h2>

<p>Before closing there are a few more things I want to mention about Asan in
comparison to valgrind:</p>

<ul>
<li><p>If you look at the processes using Asan with top, etc. you may be a bit
shocked at first to see they are using 4TB (or more) of memory.  Relax &mdash;
it&rsquo;s not real memory, it&rsquo;s virtual memory (i.e., address space).  The
algorithm used by Asan to track memory &ldquo;shadows&rdquo; actual memory (one bit for
every byte), so it needs that whole address space.  Actual memory use is
greater with Asan as well, but not nearly as bad as it appears at first
glance.  Even so, Asan disables core files by default, at least in 64-bit
mode.</p></li>
<li><p>As hoped, Asan is way faster than valgrind, especially in my &ldquo;worst-case&rdquo;
scenario with the JVM, since the only code that&rsquo;s paying the price of
tracking memory accesses is the code that is deliberately instrumented.
That also eliminates false positives from the JVM, which is a very good
thing.</p></li>
<li><p>As for false positives, the Asan folks apparently don&rsquo;t believe in them,
because there is no &ldquo;suppression&rdquo; mechanism like there is in valgrind.
Instead, the Asan folks ask that if you find what you think is a false
positive, you file a bug report with them.  In fact, when Asan finds a
memory error it immediately aborts &mdash; the rationale being that allowing Asan
to continue after a memory error would be much more work, and would make
Asan much slower.  Let&rsquo;s hope they&rsquo;re right about the absence of false
positives, but even so this &ldquo;feature&rdquo; is bound to make the debug cycle
longer, so there are probably cases where valgrind is a better choice &mdash; at
least for initial debugging.</p></li>
<li><p>Asan and valgrind have slightly different capabilities, too:</p>

<ul>
<li><p>Asan can find stack corruption errors, while valgrind only tracks heap
allocations.</p></li>
<li><p>Both valgrind and Asan can detect memory leaks (although Asan&rsquo;s leak
checking support is &ldquo;still experimental&rdquo; &ndash; see
<a href="http://code.google.com/p/address-sanitizer/wiki/LeakSanitizer">http://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</a>).</p></li>
<li><p>valgrind also detects reads of un-initialized memory, which Asan does
not.</p>

<ul>
<li>The related <a href="https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer">Memory Sanitizer</a>
tool apparently can do that.  It has an additional restriction that
the main program must be built with -fpie to enable
position-independent code, which may make it difficult to use in
certain cases, e.g. for debugging code hosted in a JVM.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>A detailed comparison of Asan, valgrind and other tools can be found <a href="http://code.google.com/p/address-sanitizer/wiki/ComparisonOfMemoryTools">here</a>.</p>

<h2>Resources</h2>

<p><a href="http://en.wikipedia.org/wiki/AddressSanitizer">http://en.wikipedia.org/wiki/AddressSanitizer</a></p>

<p><a href="http://code.google.com/p/address-sanitizer/">http://code.google.com/p/address-sanitizer/</a></p>

<p><a href="http://clang.llvm.org/docs/AddressSanitizer.html">http://clang.llvm.org/docs/AddressSanitizer.html</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In this paper, I use the term valgrind, but I really mean valgrind with the memcheck tool.  valgrind includes a bunch of other tools as well &mdash; see <a href="http://valgrind.org">http://valgrind.org</a> for details.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>As is another tool, the Thread Sanitizer, which detects data races between threads at run-time.  More on that in an upcoming post.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Omitting the frame pointer makes another register (ebp) available to the compiler, but since there are already at least a dozen other registers for the compiler to use, this extra register is unlikely to be critical.  The compiler can also omit the code that saves and restores the register, but that&rsquo;s a couple of instructions moving data between registers and L1 cache. <a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clock Sources in Linux]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/18/clock-sources-in-linux/"/>
    <updated>2014-02-18T20:07:41-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/18/clock-sources-in-linux</id>
    <content type="html"><![CDATA[<p>For measuring latency in modern systems, we need to be able to measure intervals
in microseconds at least, and preferably in nanoseconds or better. The good news
is that with relatively modern hardware and software, it is possible to
accurately measure time intervals as small as (some smallish number of)
nanoseconds. But, it&rsquo;s important to understand what you&rsquo;re measuring and what
the different edge cases might be to ensure that your results are accurate.</p>

<!--more-->


<h2>TL;DR</h2>

<p>The short version is that for best results you should be using:</p>

<ul>
<li><p>Linux kernel 2.6.18 or above &mdash; this is the first version that includes the
hrtimers package. Even better is 2.6.32 or above, since this includes
support for most of the different clock sources.</p></li>
<li><p>A CPU with a constant, invariant TSC (time-stamp counter). This means that
the TSC runs at a constant rate across all sockets/cores, regardless of
frequency changes made to the CPU by power management code. If the CPU
supports the rdtscp instruction, so much the better.</p></li>
<li><p>The TSC should be configured as the clock source for the Linux kernel at
boot time.</p></li>
<li><p>You should be measuring the interval between two events that happen on the
same machine (intra-machine timing).</p></li>
<li><p>For intra-machine timing, your best bet is generally going to be to read the
TSC directly using assembler. On my test machine it takes about 100ns
to read the TSC from software, so that is the limit of this method&rsquo;s accuracy. YMMV, of course, which is why I&rsquo;ve included <a href="https://github.com/btorpey/clocks.git">source code</a> that you can use to do your own measurements.</p></li>
</ul>


<p>The following sections will talk about how clocks work on Linux, how to access
the various clocks from software, and how to measure the overhead of acessing
them.</p>

<h3>Intra-machine vs. Inter-machine Timings</h3>

<p>However, before jumping into the details of the above recommendations, I want to
talk a little about the different problems in intra-machine vs. inter-machine
time measurements. Intra-machine timing is the simplest scenario, since it is
generally pretty easy to ensure that you use the same clock source for all your
timing measurements.</p>

<p>The problem with inter-machine timing is that, by definition, you&rsquo;re dealing
with (at least) two different clock sources. (Unless of course you are timing
round-trip intervals &mdash; if that&rsquo;s the case, you&rsquo;re lucky). And the problem with
having two clock sources is described somewhat amusingly by this old chestnut:</p>

<blockquote>A man with a watch knows what time it is. A man with two watches is never sure.<footer><cite>Segal&#8217;s Law</cite></footer></blockquote>


<p>For inter-machine timings, you&rsquo;re pretty much stuck with the CLOCK_REALTIME
clock source (the source for gettimeofday), since you presumably need a clock
that is synchronized across the two (or more) machines you are testing. In this
case, the accuracy of your timing measurements will obviously depend on how well
the clock synchronization works, and in all but the best cases you&rsquo;ll be
lucky to get accuracy better than some small number of microseconds.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>We&rsquo;re not going to talk much more about inter-machine timing in this article,
but may get into it another time.</p>

<h2>How Linux Keeps Time</h2>

<p>With that out of the way, let&rsquo;s take a look at how Linux keeps time. It starts
when the system boots up, when Linux gets the current time from the RTC (Real
Time Clock). This is a hardware clock that is powered by a battery so it
continues to run even when the machine is powered off. In most cases it is not
particularly accurate, since it is driven from a cheap crystal oscillator whose
frequency can vary depending on temperature and other factors.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> The boot
time retrieved from the RTC is stored in memory in the kernel, and is used as an
offset later by code that derives wall-clock time from the combination of boot
time and the tick count kept by the TSC.</p>

<p>The other thing that happens when the system boots is that the TSC (Time Stamp
Counter) starts running. The TSC is a register counter that is also driven from
a crystal oscillator &mdash; the same oscillator that is used to generate the clock
pulses that drive the CPU(s). As such it runs at the frequency of the CPU, so
for instance a 2GHz clock will tick twice per nanosecond.</p>

<p>There are a number of other clock sources which we&rsquo;ll discuss later, but in most
cases the TSC is the preferred clock source for two reasons: it is very
accurate, and it is very cheap to query its value (since it is simply a
register). But, there are a number of caveats to keep in mind when using the TSC
as a timing source.</p>

<ul>
<li><p>In older CPU&rsquo;s, each core had its own TSC, so in order to be sure that two
measurements were accurate relative to each other, it was necessary to pin
the measuring code to a single core.</p></li>
<li><p>Also in older CPU&rsquo;s, the TSC would run at the frequency of the CPU itself,
and if that changed (for instance, if the frequency was dynamically reduced,
or the CPU stopped completely for power management), the TSC on that CPU
would also slow down or stop. (It is sometimes possible to work around this
problem by disabling power management in the BIOS, so all CPU&rsquo;s always run
at 100%  no more, no less).</p></li>
</ul>


<p>Both of these problems are solved in more recent CPUs: a <em>constant</em> TSC keeps
all TSC&rsquo;s synchronized across all cores in a system, and an <em>invariant</em> (or
<em>nonstop</em>) TSC keeps the TSC running at a constant rate regardless of changes in
CPU frequency. To check whether your CPU supports one or both, execute the
following and examine the values output in flags:</p>

<pre>
$ cat /proc/cpuinfo | grep -i tsc
flags : ... tsc  rdtscp constant_tsc nonstop_tsc ...
</pre>


<p>The flags have the following meanings:</p>

<p>tsc
:  The system has a TSC clock.</p>

<p>rdtscp
:  The rdtscp instruction is available.</p>

<p>constant_tsc
:  The TSC is synchronized across all sockets/cores.</p>

<p>nonstop_tsc
:  The TSC is not affected by power management code.</p>

<h3>Other Clock Sources</h3>

<p>While the TSC is generally the preferred clock source, given its accuracy and
relatively low overhead, there are other clock sources that can be used:</p>

<ul>
<li><p>The HPET (High Precision Event Timer) was introduced by Microsoft and Intel
around 2005. Its precision is approximately 100 ns, so it is less accurate
than the TSC, which can provide sub-nanosecond accuracy. It is also much
more expensive to query the HPET than the TSC.</p></li>
<li><p>The acpi_pm clock source has the advantage that its frequency doesn&rsquo;t change
based on power-management code, but since it runs at 3.58MHz (one tick every
279 ns), it is not nearly as accurate as the preceding timers.</p></li>
<li><p>jiffies signifies that the clock source is actually the same timer used for
scheduling, and as such its resolution is typically quite poor. (The default
scheduling interval in most Linux variants is either 1 ms or 10 ms).</p></li>
</ul>


<p>To see the clock sources that are available on the system:</p>

<pre>
$ cat /sys/devices/system/clocksource/clocsource0/available_clocksource
tsc hpet acpi_pm
</pre>


<p>And to see which one is being used:</p>

<pre>
$ cat /sys/devices/system/clocksource/clocksource0/current_clocksource
tsc
</pre>


<p>Typically the clock source is set by the kernel automatically at boot time, but
you can force a particular clock source by including the appropriate
parameter(s) on the command line that boots Linux (e.g., in
/boot/grub/grub.conf):</p>

<p><code>ro root=/dev/... clocksource=tsc</code></p>

<p>You can also change the clock source while the system is running  e.g., to
force use of HPET:</p>

<pre>
$ echo hpet > /sys/devices/system/clocksource/clocksource0/current_clocksource
</pre>


<p>The above discusssion refers to what I will call hardware clocks, although
strictly speaking these clocks are a mixture of hardware and software. At the
bottom of it all there&rsquo;s some kind of hardware device that generates periodic
timing pulses, which are then counted to create the clock. In some cases (e.g.,
the TSC) the counting is done in hardware, while in others (e.g., jiffies) the
counting is done in software.</p>

<h2>Wall-Clock Time</h2>

<p>The hardware (or hardware/software hybrid) clocks just discussed all have one
thing in common: they are simply counters, and as such have no direct
relationship to what most of us think of as time, commonly referred to as
wall-clock time.</p>

<p>To derive wall-clock time from these counters requires some fairly intricate
software, at least if the wall-clock time is to be reasonably accurate. What
reasonably accurate means of course depends on how important it is (i.e., how
much money is available) to make sure that wall-clock time is accurate.</p>

<p>The whole process of synchronizing multiple distributed clocks is hellishly complicated, and we&rsquo;re not going to go into it here. There are many different mechanisms for synchronizing distributed clocks, from the relatively simple (e.g., NTP<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>) to the not-quite-so-simple (e.g., PTP<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>), up to specialized proprietary solutions<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>The main point is that synchronizing a system&rsquo;s wall-clock time with other
systems requires a way to adjust the clock to keep it in sync with its peers.
There are two ways this can be done:</p>

<ul>
<li><p>Stepping is the process of making (one or more) discontinuous changes to
the wall-clock component of the system time. This can cause big jumps in the
wall-clock time, including backwards jumps, although the time adjustment
software can often be configured to limit the size of a single change. A
common example is a system that is configured to initialize its clock at
boot time from an NTP server.</p></li>
<li><p>Slewing (sometimes called disciplining) involves actually changing the frequency (or frequency
multiplier) of the oscillator used to drive a hardware counter like the TSC.
This can cause the clock to run relatively faster or slower, but it cannot
jump, and so cannot go backwards.</p></li>
</ul>


<h2>Available Clock Sources</h2>

<p>The most common way to get time information in Linux is by calling the
gettimeofday() system call, which returns the current wall-clock time with
microsecond precision (although not necessarily microsecond accuracy). Since
gettimeofday() calls clock_gettime(CLOCK_REALTIME, ), the following discussion
applies to it as well.</p>

<p>Linux also implements the POSIX clock_gettime() family of functions, which let
you query different clock sources, including:</p>

<table id="mytab">
<tbody>
<tr>
  <td>CLOCK_REALTIME </td>
  <td>Represents wall-clock time. Can be both stepped and slewed by time adjustment code (e.g., NTP, PTP).</td>
</tr>
<tr>
  <td>CLOCK_REALTIME_COARSE </td>
  <td>A lower-resolution version of CLOCK_REALTIME.</td>
</tr>
<tr>
  <td>CLOCK_REALTIME_HR  </td>
  <td>A higher-resolution version of CLOCK_REALTIME. 
                        Only available with the real-time kernel.</td>
</tr>
<tr>
  <td>CLOCK_MONOTONIC </td>
  <td>Represents the interval from an abitrary time. 
                        Can be slewed but not stepped by time adjustment code. 
                        As such, it can only move forward, not backward.</td>
</tr>
<tr>
  <td>CLOCK_MONOTONIC_COARSE </td>
  <td>A lower-resolution version of CLOCK_MONOTONIC.</td>
</tr>
<tr>
  <td>CLOCK_MONOTONIC_RAW </td>
  <td>A version of CLOCK_MONOTONIC that can neither be slewed nor stepped by time adjustment code.</td>
</tr>
<tr>
  <td>CLOCK_BOOTTIME</td>
  <td>A version of CLOCK_MONOTONIC that additionally reflects time spent in suspend mode.  Only available in newer (2.6.39+) kernels.</td>
</tr>
</tbody>
</table>


<br>


<p>The availability of the various clocks, as well as their resolution and
accuracy, depends on the hardware as well as the specific Linux implementation.
As part of the <a href="https://github.com/btorpey/clocks.git">accompanying source code</a> for this article I&rsquo;ve
included a small test program (clocks.c) that when compiled<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> and run will
print the relevant information about the clocks on a system. On my test
machine<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> it shows the following:</p>

<pre>
clocks.c
                    clock          res (ns)            secs           nsecs
             gettimeofday             1,000   1,391,886,268     904,379,000
           CLOCK_REALTIME                 1   1,391,886,268     904,393,224
    CLOCK_REALTIME_COARSE           999,848   1,391,886,268     903,142,905
          CLOCK_MONOTONIC                 1         136,612     254,536,227
      CLOCK_MONOTONIC_RAW       870,001,632         136,612     381,306,122
   CLOCK_MONOTONIC_COARSE           999,848         136,612     253,271,977
</pre>


<p>Note that it&rsquo;s important to pay attention to what clock_getres() returns &mdash; a particular clock source can (and does, as can be seen above with the COARSE clocks) sometimes return what may look like higher-precision values, but any digits beyond its actual precision are likely to be garbage.  (The exception is gettimeofday &mdash; since it returns a timeval, which is denominated in micros, the lower-order digits are all zeros).</p>

<p>Also, the value returned from clock_getres() for CLOCK_MONOTONIC_RAW is clearly garbage, although I&rsquo;ve seen similar results on several machines.</p>

<p>Finally, note that the resolution listed for CLOCK_REALTIME is close to, but not
quite, 1 million &mdash; this is an artifact of the fact that the oscillator cannot
generate a frequency of exactly 1000 Hz &mdash; it&rsquo;s actually 1000.15 Hz.</p>

<h2>Getting Clock Values in Software</h2>

<p>Next up is a brief discussion of how to read these different clock values from
software.</p>

<h3>Assembler</h3>

<p>In assembler language, the RDTSC instruction returns the value of the TSC
directly in registers edx:eax. However, since modern CPU&rsquo;s support out-of-order
execution, it has been common practice to insert a serializing instruction (such
as CPUID) prior to the RDTSC instruction in order to ensure that the execution
of RDTSC is not reordered by the processor.</p>

<p>More recent CPU&rsquo;s include the RDTSCP instruction, which does any necessary
serialization itself. This avoids the overhead of the CPUID instruction, which
can be considerable (and variable). If your CPU supports RDTSCP, use that instead of the
CPUID/RDTSC combination.</p>

<h3>C/C++</h3>

<p>Obviously, the RDTSC instruction can be called directly from C or C++, using
whatever mechanism your compiler provides for accessing assembler language, or
by calling an assembler stub that is linked with the C/C++ program. (An example
can be found at <a href="http://agner.org/optimize/#asmlib">Agner Fog&rsquo;s excellent website</a>).</p>

<p>Calling gettimeofday() or clock_gettime() is pretty straightforward &mdash; see the
accompanying <a href="https://github.com/btorpey/clocks/blob/master/clocks.c">clocks.c source file</a> for examples.</p>

<h3>Java</h3>

<p>Java has only two methods that are relevant to this discussion:</p>

<ul>
<li><p>System.currentTimeMillis() returns the current wall-clock time as the number
of milliseconds since the epoch. It calls gettimeofday(), which in turn
calls clock_gettime(CLOCK_REALTIME, &hellip;).</p></li>
<li><p>System.nanoTime returns the number of nanoseconds since some unspecified
starting point. Depending on the capabilities of the system, it either calls
gettimeofday(), or clock_gettime(CLOCK_MONOTONIC, ).</p></li>
</ul>


<p>The bad news is that if you need clock values other than the above in Java,
you&rsquo;re going to need to roll your own, e.g. by calling into C via JNI. The good
news is that doing so is not much more expensive than calling nanoTime (at least in my tests).</p>

<h3>Overhead of Clock Queries</h3>

<p>The Heisenberg Uncertainty Principle says, in a nutshell, that the act of
observing a phenomenom changes it. A similar issue exists with getting
timestamps for latency measurement, since it takes a finite (and sometimes
variable) amount of time to read any clock source.  In other words, just because the TSC on a 2GHz machine ticks twice per nanosecond doesn&rsquo;t mean we can measure intervals of a nanosecond &mdash; we also need to account for the time it takes to read the TSC from software.</p>

<p>So, how expensive is it to perform these different clock queries? Included is some <a href="https://github.com/btorpey/clocks.git">sample code</a> that you can
use to measure the time it takes to query various clock sources, from both C++
and Java (using JNI to call C code).</p>

<p>Both the C++ and Java versions take the same approach: call the particular clock
function in a tight loop, and store the result. We do this a large number of
times, and hang on to the results from the final iteration. This has the effect
of allowing Java to do any jitting it needs to, and for both the C++ and Java
versions to help ensure that code and data is in the processor&rsquo;s cache memory.</p>

<p>The results of running the test on my test machine are:</p>

<pre>
ClockBench.cpp
                   Method       samples     min     max     avg  median   stdev
           CLOCK_REALTIME       200       57.00   81.00   58.24   69.00    2.99
    CLOCK_REALTIME_COARSE       200        0.00    0.00    0.00    0.00    0.00
          CLOCK_MONOTONIC       200       57.00   84.00   57.52   70.50    2.82
      CLOCK_MONOTONIC_RAW       200      652.00 1104.00  697.26  878.00   60.81
   CLOCK_MONOTONIC_COARSE       200        0.00    0.00    0.00    0.00    0.00
              cpuid+rdtsc       200       96.00  100.00   97.74   98.00    1.57
                    rdtsc       200       27.00   28.00   27.07   27.50    0.26
Using CPU frequency = 2.660000

ClockBench.java
                   Method       samples     min     max     avg  median   stdev
          System.nanoTime       200      111.00  115.00  113.10  113.00    1.49
           CLOCK_REALTIME       200      108.00  114.00  110.16  111.00    1.56
              cpuid+rdtsc       200      153.00  160.00  154.83  156.50    1.64
                    rdtsc       200       75.00   79.00   77.43   77.00    1.35
Using CPU frequency = 2.660000
</pre>


<p>A few things to note about these results:</p>

<ul>
<li><p>Both of the COARSE clocks show a latency of zero for getting the clock
value. This tells us that the time it takes to
get the clock value is less than the resolution of the clock. (Our previous
test showed a resolution of 1ms for the COARSE clocks).</p></li>
<li><p>For some reason, the CLOCK_MONOTONIC_RAW clock is very expensive to query. I
can&rsquo;t explain this &mdash;  you would think that its lack of adjustment would make
it faster, not slower. This is unfortunate, as otherwise it would be an
excellent choice for intra-machine timing.</p></li>
<li><p>As you might expect, the combination of cpuid and rdtsc is slower than
rdtscp, which is slower than rdtsc alone. In general, this would
suggest that rdtscp should be preferred if available, with a fallback to
cpuid+rdtsc if not. (While rdtsc alone is the fastest, the fact that it can
be inaccurate as a result of out-of-order execution means it is only useful
for timing relatively long operations where that inaccuracy is not
significant &mdash; but those are precisely the scenarios where its speed is less
important).</p></li>
<li><p>Also as expected, the Java versions are slightly slower than the C++
versions, presumably due to the overhead of going through JNI.</p></li>
</ul>


<h2>Conclusion</h2>

<p>I thought this would be a very brief and somewhat trivial research project. In
fact, it turned out to be far more complicated (and less well-documented) than I
expected. I guess I should have known: everything related to time and computers
turns out to be a major pain in the neck!</p>

<p>Anyway, I hope this proves helpful. (I know I would have been very happy to have
had this when I started looking into clock sources).</p>

<p>As always, please feel free to <a href="mailto:wallstprog@gmail.com">contact me</a>
directly with comments, suggestions, corrections, etc.</p>

<h2>Additional Resources</h2>

<p>Following are the main anchor points that I kept coming back to you as I
researched this article.</p>

<p><a href="http://elinux.org/Kernel_Timer_Systems">http://elinux.org/Kernel_Timer_Systems</a></p>

<p><a href="http://elinux.org/High_Resolution_Timers">http://elinux.org/High_Resolution_Timers</a></p>

<p><a href="http://juliusdavies.ca/posix_clocks/clock_realtime_linux_faq.html">http://juliusdavies.ca/posix_clocks/clock_realtime_linux_faq.html</a></p>

<p><a href="http://en.wikipedia.org/wiki/Time_Stamp_Counter">http://en.wikipedia.org/wiki/Time_Stamp_Counter</a></p>

<p><a href="http://stackoverflow.com/questions/10921210/cpu-tsc-fetch-operation-especially-in-multicore-multi-processor-environment">http://stackoverflow.com/questions/10921210/cpu-tsc-fetch-operation-especially-in-multicore-multi-processor-environment</a></p>

<p><a href="http://www.citihub.com/requesting-timestamp-in-applications/">http://www.citihub.com/requesting-timestamp-in-applications/</a></p>

<p><a href="http://www.intel.com/content/www/us/en/intelligent-systems/embedded-systems-training/ia-32-ia-64-benchmark-code-execution-paper.html">http://www.intel.com/content/www/us/en/intelligent-systems/embedded-systems-training/ia-32-ia-64-benchmark-code-execution-paper.html</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The best case being hardware on each machine with a CSAC (chip-scale atomic clock) or OCXO (oven-controlled crystal oscillator). These can be a bit pricey, however.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The accuracy of a typical RTC in a PC-type computer is rated at +/&ndash; 20ppm, so it can gain or lose 20 us each second. This turns out to be approximately one minute per month, which may be OK for a cheap digital watch, but for a computer is not too good. For more information, see <a href="http://www.maximintegrated.com/app-notes/index.mvp/id/58">http://www.maximintegrated.com/app-notes/index.mvp/id/58</a>.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Network Time Protocol, RFC 1305 (<a href="https://tools.ietf.org/html/rfc1305">https://tools.ietf.org/html/rfc1305</a>)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Precision Time Protocol, IEEE 1588 (<a href="http://www.nist.gov/el/isd/ieee/ieee1588.cfm">http://www.nist.gov/el/isd/ieee/ieee1588.cfm</a>)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>From companies like Symmetricon, Corvil, TS Associates and others.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Note that the program must be compiled, as well as run, on the target system &mdash; it uses the presence or absence of pre-processor symbols to determine whether a particular clock source is available.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>CentOS 6.5 running on a Dell 490 with dual Xeon 5150&rsquo;s at 2.6 GHz.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You may ask yourself - "How did I get here?"]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/13/how-did-i-get-here/"/>
    <updated>2014-02-13T18:02:27-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/13/how-did-i-get-here</id>
    <content type="html"><![CDATA[<p>In addition to being a great line from David Byrne and Talking Heads (from &ldquo;Life
During Wartime&rdquo;), this is also a question I often ask myself when
looking at log files. Today&rsquo;s tip is worth the price of the whole blog (i.e.,
free), but I predict that you&rsquo;ll be glad you know it.</p>

<!--more-->


<p>It&rsquo;s pretty common to pipe the output of a command, or string of commands, to a
file to have a record of what happened when executing the command, something
like this:</p>

<p><code>big_gnarly_command_line_with_options 2&gt;&amp;1 | tee logfile.out</code></p>

<p>That works great for capturing the <em>output</em> of the command, but what about the
big_gnarly_command_line_with_options itself?</p>

<p>Try this instead:</p>

<p><code>bash -x -c "big_gnarly_command_line_with_options" 2&gt;&amp;1 | tee logfile.out</code></p>

<p>Now, your output file will look like this:</p>

<p><code>+ big_gnarly_command_line_with_options</code><br>
<code>... output of big_gnarly_command_line_with_options ...</code></p>

<p>If your gnarly command is actually several gnarly commands, enclose the whole
gnarly list in parentheses and separate with semicolons (or &amp;&amp;), like so:</p>

<p><code>bash -x -c "(big_gnarly_command_line_with_options_1;
big_gnarly_command_line_with_options_2)" 2&gt;&amp;1 | tee logfile.out</code></p>

<p>Normal quoting rules apply:</p>

<ul>
<li><p>If you enclose the command(s) in double-quotes (&ldquo;), variable substitution
will be done on the command line</p></li>
<li><p>If you need to include a double-quote within double-quotes, you need to
escape it (with the backslash (\) character)</p></li>
<li><p>If you enclose the command line(s) in single quotes (&lsquo;), no variable
substitution is done</p></li>
<li><p>There is no way to include a single-quote within single-quotes, but there is
a trick that gives a similar effect, that you can read about here (<a href="http://stackoverflow.com/a/1250279/203044">http://stackoverflow.com/a/1250279/203044</a>).</p></li>
</ul>


<p>Now you&rsquo;ll never need to ask yourself &ldquo;How did I get here&rdquo;?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Singleton's]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/12/shared-singletons/"/>
    <updated>2014-02-12T17:53:36-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/12/shared-singletons</id>
    <content type="html"><![CDATA[<p>Singleton’s are kind of like Rodney Dangerfield – they don’t get no respect. And
yet, there are scenarios where a singleton is just the ticket – for instance,
when a relatively expensive and/or long-lived resource needs to be shared among
a number of independent threads.</p>

<p>shared_ptr&rsquo;s can help make this easier and less error-prone, but even so there are some
edge cases that need to be considered.</p>

<!--more-->


<p>In our case, we had a need for a singleton object to refer to a middleware
connection which was being shared across a large number of child objects, which
were in turn being manipulated on a number of different threads.</p>

<p>In our case, we also wanted lazy initialization (construct on first use), and to
clean up the singleton properly when the code was done using it. Since the
creation and destruction order of the using objects is not deterministic, the
obvious solution is to use reference counting to manage the singleton’s lifetime,
and the simplest way to do that is to use <a href="http://www.cplusplus.com/reference/memory/shared_ptr/">shared_ptr’s</a>.</p>

<p>shared_ptr’s were introduced in Boost, and were subsequently adopted by the C++
standards committee as part of the base language with the tr1 and C++0x
standards. As such, they have been widely supported (think gcc and MS compilers)
for a while now.</p>

<p>One of the “magic” qualities of shared_ptr’s is that all shared_ptr’s that point
to the same thing (what I’m going to refer to as a “target” from here on) share
a single reference count (hence the “shared” part of the name), so as individual
shared_ptr’s go out of scope, the reference counter on the target itself is
automatically decremented, and the target is deleted when its reference count
goes to zero.</p>

<p>However, as we’ll see, there are some fine points that need to be considered
even in this relatively simple case.</p>

<p>Our first attempt looked something like this:</p>

<figure class='code'><figcaption><span> (smart1.cpp)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart1.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation constructs the singleton into a class-static shared_ptr on
the first call to getShared(), and then hands out copies of the shared_ptr to
each caller. When run, the following output is produced:</p>

<figure class='code'><figcaption><span> (smart1.out)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart1.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b9010</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x154b9030</span>
</span><span class='line'><span class="go"> after   copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b90a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 2</span>
</span><span class='line'><span class="go"> after   copy: 3 master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b9010</span>
</span><span class='line'><span class="go"> before  copy: 3 master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b90a0</span>
</span><span class='line'><span class="go"> before  copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b90a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 1</span>
</span><span class='line'><span class="go"> after   copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b90a0</span>
</span><span class='line'><span class="go"> before  copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Exiting main</span>
</span><span class='line'><span class="go">SharedClass dtor:0x154b9030</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation works, but with one major caveat: as you can see from the
output, the shared_ptr’s get an initial reference count of two – one for the
creation of the singleton itself, and one for the copy of the shared_ptr that is
returned from getShared.</p>

<p>This means that the singleton will not actually be deleted until after returning
from main(), which is when static objects get deleted. (For more information on
why this is so, see section 3.6.3 of the C++ standard).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> In many cases, that
would not be a problem, but in our case the middleware connection to which the
shared_ptr’s refer gets cleaned up in the main thread prior to returning, and so
the final destructor referred to an object that was no longer valid.</p>

<p>Another issue has to do with RAII <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> – if you&rsquo;re relying on the destruction
of the target to release resources, the fact that the target is effectively
never deleted is a potential problem.</p>

<p>Last but not least is the issue of overall tidiness – given that the shared
object is allocated within the scope of main(), it just seems wrong to let it go
out of scope after main() exits. Ideally, we’d like to destroy the shared object
prior to returning from main(), but how to do that?</p>

<p>Our next attempt looks like this:</p>

<figure class='code'><figcaption><span> (smart2.cpp)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart2.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">unique</span><span class="p">())</span>
</span><span class='line'>      <span class="n">masterPtr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the destructor for the container class, we first reset() the container’s copy
of the shared_ptr. This reduces its reference count to zero, and also decrements
the reference counter on the static shared_ptr that was initialized when the
singleton was created. (The destructor of the container’s copy of the shared_ptr
will still be executed on return from the container’s destructor, but since the
reference count is already zero, it will do nothing).</p>

<p>Then we test the static shared_ptr to see if it’s reference count is equal to
one (by calling unique()), and if it is we call reset on it to decrement its
reference count once again, which ends up deleting the singleton (since the
reference count is now zero).</p>

<p>When we run this version of the code, we see the following output:</p>

<figure class='code'><figcaption><span> (smart2.out)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart2.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f010</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x642f030</span>
</span><span class='line'><span class="go"> after   copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f0a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 2</span>
</span><span class='line'><span class="go"> after   copy: 3 master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f010</span>
</span><span class='line'><span class="go"> before  copy: 3 master: 3</span>
</span><span class='line'><span class="go"> after   copy: 0 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f0a0</span>
</span><span class='line'><span class="go"> before  copy: 2 master: 2</span>
</span><span class='line'><span class="go">SharedClass dtor:0x642f030</span>
</span><span class='line'><span class="go"> after   copy: 0 master: 0</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f0a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x642f030</span>
</span><span class='line'><span class="go"> after   copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f0a0</span>
</span><span class='line'><span class="go"> before  copy: 2 master: 2</span>
</span><span class='line'><span class="go">SharedClass dtor:0x642f030</span>
</span><span class='line'><span class="go"> after   copy: 0 master: 0</span>
</span><span class='line'>
</span><span class='line'><span class="go">Exiting main</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the singleton does in fact get destroyed prior to returning from
main(), which is what we want. We also see that the singleton gets destroyed
when nobody is using it, and automatically gets recreated if needed, which is
all well and good.</p>

<p>But, the code to make this happen does seem a bit messy, and potentially
unclear. Surely, there’s a better way to get the behavior we want without having
to directly manipulate reference counts.</p>

<p>Which brings us to shared_ptr’s cousin, the weak_ptr. A weak_ptr is similar to a
shared_ptr, except that assigning to a weak_ptr does not increment the shared
reference count:</p>

<figure class='code'><figcaption><span> (smart3.cpp)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart3.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">temp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this version, we change the code to use a weak_ptr instead of a shared_ptr
for the static class member that is initialized on creation of the singleton
object, and we remove the fiddling with reference counts that we had to do make
things come out right in the previous example.</p>

<figure class='code'><figcaption><span> (smart3.out)</span> <a href='http://btorpey.github.io/downloads/code/smart/smart3.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf8010</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x18bf8030</span>
</span><span class='line'><span class="go"> after   copy: 1 master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf80a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 1</span>
</span><span class='line'><span class="go"> after   copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf8010</span>
</span><span class='line'><span class="go"> before  copy: 2 master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf80a0</span>
</span><span class='line'><span class="go"> before  copy: 1 master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">SharedClass dtor:0x18bf8030</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf80a0</span>
</span><span class='line'><span class="go"> before  copy: 0 master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x18bf8030</span>
</span><span class='line'><span class="go"> after   copy: 1 master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf80a0</span>
</span><span class='line'><span class="go"> before  copy: 1 master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">SharedClass dtor:0x18bf8030</span>
</span><span class='line'><span class="go">Exiting main</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voila – we can see that the behavior is exactly what we wanted, but without
the need to manipulate reference counts directly. Not to mention, the behavior
is a bit more like what one would expect (e.g., member variables get destroyed
on exit from the destructor, not in the body of the destructor).</p>

<h3>Acknowledgements</h3>

<p>Thanks to the folks at cplusplus.com, especially “simeonz” for
<a href="http://www.cplusplus.com/forum/general/37113/">this post</a>, which discusses the
general problem and provides a nice code example that I used as the basis for
this discussion.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>A free copy of the most recent working draft can be downloaded <a href="http://isocpp.org/files/papers/N3690.pdf">here</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Old Is New Again]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/11/whats-old-is-new-again/"/>
    <updated>2014-02-11T20:07:41-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/11/whats-old-is-new-again</id>
    <content type="html"><![CDATA[<p>Sometimes it seems that all this low-latency, HFT stuff is new, but then
you see something like this…</p>

<!--more-->


<p><img class="center" src="http://edison.rutgers.edu/images/xx/xx1325.jpg"></p>

<p>Source: The Thomas Edison Papers, Rutgers University <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://edison.rutgers.edu/NamesSearch/glocpage.php3?gloc=X135&amp;">http://edison.rutgers.edu/NamesSearch/glocpage.php3?gloc=X135&amp;</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIXing less]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/10/fixing-less/"/>
    <updated>2014-02-10T08:37:11-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/10/fixing-less</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a handy tip for those who (like me) spend a fair amount of time staring
at FIX logs.</p>

<!--more-->


<p>FIX may be the protocol that everybody loves to hate, but it doesn&rsquo;t look like it&rsquo;s
going anywhere, so I guess we all just need to get over it and learn to live with it.</p>

<p>One of the things that is hard to live with, though &mdash; at least for me &mdash; is the
visual cacophony that results when browsing FIX logs with less.
<img class="center" src="http://btorpey.github.io/images/less-before.png"></p>

<p>It turns out that it&rsquo;s possible to control how less displays the x&#8217;01&#8217;
delimiters to make this chore a little easier on the eyes.  In my case, I
use the following in my .bash_profile:</p>

<p><code>export LESSBINFMT="*u%x"</code></p>

<p>This dials down the visual clutter to a level that I find much easier to deal
with.
<img class="center" src="http://btorpey.github.io/images/less-after.png"></p>

<p>(Note that the man page for less mentions that it&rsquo;s possible to display the hex codes in square brackets, but I have not found that to work on any of the systems where I&rsquo;ve tried it &mdash; YMMV).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond Compare]]></title>
    <link href="http://btorpey.github.io/blog/2014/01/29/beyond-compare/"/>
    <updated>2014-01-29T08:42:44-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/01/29/beyond-compare</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a happy user of <a href="http://scootersoftware.com">Beyond Compare</a> on Windows for many years, so one of my big concerns when switching to Mac a while ago was, what was I going to use in its place?</p>

<!--more-->


<p>Well, for once I got the timing right &mdash; Scooter Software released an alpha version of Beyond Compare for Mac right around the time I made the switch.  (And a good thing, too!  I tried everything else out there, and nothing else even comes close).</p>

<p>So, what is Beyond Compare?  It&rsquo;s a comparison program that does visual &ldquo;diffs&rdquo; of directories and files.  I use it to backup and sync my machines, for reviewing changes prior to commit, and in general just to keep track of what I&rsquo;ve changed as I work.  If you&rsquo;ve never used a visual diff like BC, trust me, your life could get a whole lot easier.</p>

<p><img src="http://www.scootersoftware.com/images/FolderCompare.png"></p>

<p>It&rsquo;s now out in public beta, and comes highly recommended (<a href="http://www.scootersoftware.com/beta.php">http://www.scootersoftware.com/beta.php</a>) &mdash; it&rsquo;s saved my <em>tuchis</em> more times than I can count.</p>
]]></content>
  </entry>
  
</feed>
