<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Confessions of a Wall Street Programmer]]></title>
  <link href="http://btorpey.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://btorpey.github.io/"/>
  <updated>2015-01-03T09:52:17-05:00</updated>
  <id>http://btorpey.github.io/</id>
  <author>
    <name><![CDATA[Bill Torpey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building clang]]></title>
    <link href="http://btorpey.github.io/blog/2015/01/02/building-clang/"/>
    <updated>2015-01-02T12:41:45-05:00</updated>
    <id>http://btorpey.github.io/blog/2015/01/02/building-clang</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/timallen.jpg" width="230" height="240" title="" >

clang is a great compiler, with a boatload of extremely helpful tools, including static analysis, run-time memory and data race analysis, and many others.  And it's apparently pretty easy to get those benefits on one of the supported platforms -- basically Ubuntu and Mac (via XCode).

That's fine, but if you get paid to write software, there's a good chance it's going to be deployed on RedHat, or one of its variants.  And, getting clang working on RedHat is a huge pain in the neck.  The good news is that I did the dirty work for you (ouch!), so you don't have to.

<!--more-->

<br>
Bootstrapping the compiler
--------------------------

Like almost all compilers, clang is written in a high-level language (in this case C++), so building clang requires a host compiler to do the actual compilation.  On Linux this is almost always gcc, since it is ubiquitous on Linux machines.  

There's a hitch, though -- as of version 3.3 some parts of clang are written in C++11, so the compiler used to compile clang needs to support the C++11 standard.

This is a real problem with RedHat, since the system compiler supplied with RedHat 6 (the most recent version that is in wide use), is gcc 4.4.7.  That compiler does not support C++11, and so is not able to compile clang.  So, the first step is getting a C++11-compliant compiler so we can compile clang.  For this example, we're going to choose gcc 4.8.2, for a variety of reasons.  The good news is that gcc 4.8.2 is written in C++ 98, so we can build it using the system compiler (gcc 4.4.7).  

The next thing we have to decide is where to install gcc 4.8.2, and we basically have these choices:

-   We could install in /usr, where the new compiler would replace the system compiler.  Once we do that, though, we've effectively created a custom OS that will be required on all our development/QA/production machines going forward.  If "all our development/QA/production machines" == 1, this may not be a problem, but as the number increases things can get out of hand quickly. This approach also does not lend itself to being able to have more than one version of a particular package on a single machine, which is often helpful.

-   We could install in /usr/local (the default for gcc, and many other packages when built from source), so the new compiler would coexist with the system compiler.  The problem with this approach is that /usr/local can (and in practice often does) rapidly turn into a dumping-ground for miscellaneous executables and libraries.  Which wouldn't be so bad if we were diligent about keeping track of what they were and where they came from, but if we're going to do that we might as well ...

-   Install somewhere else -- it doesn't really matter where, as long as there's a convention. In this case, we're going to use the convention that any software that is not bundled with the OS gets installed in /build/share/\<package\>/\<version\>.  This approach makes it easy to know exactly what versions of what software we're running, since we need to specify its install directory explicitly in PATH and/or LD\_LIBRARY\_PATH.  It also makes it much easier to keep track of what everything is and where it came from.

Here's a script that will download gcc 4.8.2 along with its prerequisites, build it and install it as per the convention we just discussed:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (build-gcc.sh)</span> <a href='/downloads/code/clang/build-gcc.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash </span>
</span><span class='line'><span class="nb">set</span> -exv
</span><span class='line'>
</span><span class='line'><span class="c">## modify the following as needed for your environment</span>
</span><span class='line'><span class="c"># location where gcc should be installed</span>
</span><span class='line'><span class="nv">INSTALL_PREFIX</span><span class="o">=</span>/build/share/gcc/4.8.2
</span><span class='line'><span class="c"># number of cores</span>
</span><span class='line'><span class="nv">CPUS</span><span class="o">=</span><span class="k">$(</span>nproc<span class="k">)</span>
</span><span class='line'><span class="c"># uncomment following to get verbose output from make</span>
</span><span class='line'><span class="c">#VERBOSE=VERBOSE=1</span>
</span><span class='line'><span class="c"># uncomment following if you need to sudo in order to do the install</span>
</span><span class='line'><span class="c">#SUDO=sudo</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">## get everything</span>
</span><span class='line'>wget http://www.netgull.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.bz2
</span><span class='line'>wget https://gmplib.org/download/gmp/gmp-4.3.2.tar.bz2
</span><span class='line'>wget http://www.multiprecision.org/mpc/download/mpc-0.8.1.tar.gz
</span><span class='line'>wget http://www.mpfr.org/mpfr-2.4.2/mpfr-2.4.2.tar.bz2
</span><span class='line'>wget ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-0.18.1.tar.gz
</span><span class='line'>wget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.12.2.tar.bz2
</span><span class='line'>
</span><span class='line'><span class="c">## untar gcc</span>
</span><span class='line'>tar xf gcc-4.8.2.tar.bz2
</span><span class='line'><span class="c">## untar prereqs</span>
</span><span class='line'><span class="c"># gmp</span>
</span><span class='line'>tar xf gmp-4.3.2.tar.bz2
</span><span class='line'>mv gmp-4.3.2 gcc-4.8.2/gmp
</span><span class='line'><span class="c"># mpc</span>
</span><span class='line'>tar xf mpc-0.8.1.tar.gz
</span><span class='line'>mv mpc-0.8.1 gcc-4.8.2/mpc
</span><span class='line'><span class="c"># mpfr</span>
</span><span class='line'>tar xf mpfr-2.4.2.tar.bz2
</span><span class='line'>mv mpfr-2.4.2 gcc-4.8.2/mpfr
</span><span class='line'><span class="c"># cloog</span>
</span><span class='line'>tar xf cloog-0.18.1.tar.gz
</span><span class='line'>mv cloog-0.18.1 gcc-4.8.2/cloog
</span><span class='line'><span class="c"># isl</span>
</span><span class='line'>tar xf isl-0.12.2.tar.bz2
</span><span class='line'>mv isl-0.12.2 gcc-4.8.2/isl
</span><span class='line'>
</span><span class='line'><span class="c"># build gcc</span>
</span><span class='line'>rm -rf gcc
</span><span class='line'>mkdir gcc
</span><span class='line'><span class="nb">cd </span>gcc
</span><span class='line'>../gcc-4.8.2/configure --prefix<span class="o">=</span><span class="k">${</span><span class="nv">INSTALL_PREFIX</span><span class="k">}</span> --enable-languages<span class="o">=</span>c,c++ --disable-multilib
</span><span class='line'>make -j <span class="k">${</span><span class="nv">CPUS</span><span class="k">}</span> <span class="k">${</span><span class="nv">VERBOSE</span><span class="k">}</span>
</span><span class='line'><span class="c"># install it</span>
</span><span class='line'>rm -rf <span class="k">${</span><span class="nv">INSTALL_PREFIX</span><span class="k">}</span>
</span><span class='line'><span class="k">${</span><span class="nv">SUDO</span><span class="k">}</span> make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

To run the script, change to an empty directory and then simply invoke the script.  If you want to keep track of all the commands and output related to the build, you can invoke the script using the trick I wrote about in an earlier post.

Preparing to build
------------------

Now that we've built gcc, we can get started building clang[^1].  By default, clang is built to use the C++ standard library (libstdc++) that is included with gcc. That's the good news, since that means code generated using clang can be intermixed freely with code generated with gcc -- which is almost all the code on a typical Linux machine.[^2] The bad news is that by default, clang looks for libstdc++ in the default location (/usr). Since we chose to install gcc in a non-standard location, there are several settings that need to be modified to get a successful build of clang:

<table>
<col width="36%" />
<col width="59%" />
<tbody>
<tr class="odd">
<td align="left"><p>CMAKE_C_COMPILER</p></td>
<td align="left"><p>The location of the C compiler to use.</p></td>
</tr>
<tr class="even">
<td align="left"><p>CMAKE_CXX_COMPILER</p></td>
<td align="left"><p>The location of the C++ compiler to use.</p></td>
</tr>
<tr class="odd">
<td align="left"><p>CMAKE_INSTALL_PREFIX</p></td>
<td align="left"><p>The location where the compiler should be installed.</p></td>
</tr>
<tr class="even">
<td align="left"><p>CMAKE_CXX_LINK_FLAGS</p></td>
<td align="left"><p>Additional flags to be passed to the linker for C++ programs.  See below for more information.</p></td>
</tr>
<tr class="odd">
<td align="left"><p>GCC_INSTALL_PREFIX</p></td>
<td align="left"><p>Setting this parameter when building clang is equivalent to specifying the <code>--gcc-toolchain</code> parameter when invoking clang. See below for more information.</p></td>
</tr>
</tbody>
</table>

 

While all these settings are documented in one place or another, as far as I know there is no single place that mentions them all.  (While clang is a terrific tool, the contirbutors apparently prefer writing code to writing documentation ;-)  So, these settings have been cobbled together from a number of sources (listed at the end of this article), and tested by much trial and error.

The first four settings are plain-vanilla cmake settings, but one needs some additional discussion.

### CMAKE\_CXX\_LINK\_FLAGS

In the build script this is set to `"-L${HOST_GCC}/lib64 -Wl,-rpath,${HOST_GCC}/lib64"`. What this does is two-fold:

-   The `-L` parameter adds the following directory to the search path for the linker.  This is needed  to locate the libraries installed with gcc.        

-   The `-Wl,-rpath,` parameter installs a "run path" into any executables (including shared libraries) created during the build.  This allows the executable to find its dependent libraries at run-time, independent of any other settings. 

    If we don't do this, the resulting executables will fail at run-time with an error similar to the following:

        clang++: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by clang++)  
        clang++: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by clang++)  
        clang++: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by clang++)

    This error is caused because of the symbol versioning that we mentioned earlier -- the compiler relies on the libraries with which it was built (the gcc 4.8.2 libraries), but because that is not installed in /usr, the run-time loader is only looking at the libstdc++ for the gcc 4.4.7 compiler, and that library doesn't contain the symbols that the executable is calling for.

    Note that you can display the run path for any executable (including shared libraries) with the following command:

        > objdump -x /build/share/clang/trunk/bin/clang++ | grep RPATH
        RPATH                /build/share/gcc/4.8.2/lib64:$ORIGIN/../lib

### GCC\_INSTALL\_PREFIX

The final setting that we need to specify is GCC\_INSTALL\_PREFIX. This tells the clang build where the gcc that is being used to build clang is located. Among other things, this determines where the clang compiler will look for system include and library files at compile and link time. If this is not set, clang will default to looking for include files in the system include directories, which can cause compile errors like the following:

    clang++ -std=c++11 hello.cpp
    In file included from hello.cpp:1:
    In file included from /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/iostream:40:
    In file included from /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream:40:
    In file included from /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ios:40:
    In file included from /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception:148:
    /usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception_ptr.h:143:13: error: unknown type name 'type_info'
          const type_info*
                ^
    1 error generated.

Building clang
--------------

Now that we have that out of the way, we can build clang. The following script will download clang source from svn, build and install it.
 
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (build-clang.sh)</span> <a href='/downloads/code/clang/build-clang.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -exv
</span><span class='line'>
</span><span class='line'><span class="c">## modify the following as needed for your environment</span>
</span><span class='line'><span class="c"># location where clang should be installed</span>
</span><span class='line'><span class="nv">INSTALL_PREFIX</span><span class="o">=</span>/build/share/clang/trunk
</span><span class='line'><span class="c"># location of gcc used to build clang</span>
</span><span class='line'><span class="nv">HOST_GCC</span><span class="o">=</span>/build/share/gcc/4.8.2
</span><span class='line'><span class="c"># number of cores</span>
</span><span class='line'><span class="nv">CPUS</span><span class="o">=</span><span class="k">$(</span>nproc<span class="k">)</span>
</span><span class='line'><span class="c"># uncomment following to get verbose output from make</span>
</span><span class='line'><span class="c">#VERBOSE=VERBOSE=1</span>
</span><span class='line'><span class="c"># uncomment following if you need to sudo in order to do the install</span>
</span><span class='line'><span class="c">#SUDO=sudo</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># gets clang tree from svn into ./llvm</span>
</span><span class='line'><span class="c"># params (e.g., -r) can be specified on command line</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>rm -rf llvm
</span><span class='line'><span class="c">## get everything</span>
</span><span class='line'><span class="c"># llvm</span>
</span><span class='line'>svn co <span class="nv">$*</span> http://llvm.org/svn/llvm-project/llvm/trunk llvm
</span><span class='line'><span class="c"># clang</span>
</span><span class='line'><span class="nb">cd </span>llvm/tools
</span><span class='line'>svn co <span class="nv">$*</span> http://llvm.org/svn/llvm-project/cfe/trunk clang
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'><span class="c"># extra</span>
</span><span class='line'><span class="nb">cd </span>llvm/tools/clang/tools
</span><span class='line'>svn co <span class="nv">$*</span> http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'><span class="c"># compiler-rt</span>
</span><span class='line'><span class="nb">cd </span>llvm/projects
</span><span class='line'>svn co <span class="nv">$*</span> http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'>
</span><span class='line'><span class="c">## build clang w/gcc installed in non-standard location</span>
</span><span class='line'>rm -rf clang
</span><span class='line'>mkdir -p clang
</span><span class='line'><span class="nb">cd </span>clang
</span><span class='line'>cmake -DCMAKE_C_COMPILER<span class="o">=</span><span class="k">${</span><span class="nv">HOST_GCC</span><span class="k">}</span>/bin/gcc -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="k">${</span><span class="nv">HOST_GCC</span><span class="k">}</span>/bin/g++ -DGCC_INSTALL_PREFIX<span class="o">=</span><span class="k">${</span><span class="nv">HOST_GCC</span><span class="k">}</span> -DCMAKE_CXX_LINK_FLAGS<span class="o">=</span><span class="s2">&quot;-L${HOST_GCC}/lib64 -Wl,-rpath,${HOST_GCC}/lib64&quot;</span> -DCMAKE_INSTALL_PREFIX<span class="o">=</span><span class="k">${</span><span class="nv">INSTALL_PREFIX</span><span class="k">}</span> -DLLVM_ENABLE_ASSERTIONS<span class="o">=</span>ON -DCMAKE_BUILD_TYPE<span class="o">=</span><span class="s2">&quot;Release&quot;</span> -DLLVM_TARGETS_TO_BUILD<span class="o">=</span><span class="s2">&quot;X86&quot;</span> ../llvm
</span><span class='line'>make -j <span class="k">${</span><span class="nv">CPUS</span><span class="k">}</span> <span class="k">${</span><span class="nv">VERBOSE</span><span class="k">}</span>
</span><span class='line'><span class="c"># install it</span>
</span><span class='line'>rm -rf <span class="k">${</span><span class="nv">INSTALL_PREFIX</span><span class="k">}</span>
</span><span class='line'><span class="k">${</span><span class="nv">SUDO</span><span class="k">}</span> make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

Note that you can specify a parameter to the script (e.g., `-r 224019`) to get a specific version of clang from svn.

Building using clang
--------------------

At this point, we should have a working clang compiler that we can use to build and run our own code. But once again, because the "host" gcc (and libstdc++) are installed in a non-standard location, we need to tweak a couple of build settings to get a successful build.

### Specifying the compiler to use

There are a bunch of ways to specify the compiler, depending on what build system you're using -- I'll mention a couple of them here.

If you're using make, you can prefix the make command as follows:

    CC=clang CXX=clang++ make ... 

If you're using cmake you can [specify the compiler to use](http://www.cmake.org/Wiki/CMake_FAQ#How_do_I_use_a_different_compiler.3F) on the cmake command line, as follows:

    cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ... 

Personally, I find that ridiculously inconvenient, so in my CMakeLists.txt file I specify the compiler directly:

    # cmake doc says this is naughty, but their suggestions are even worse...
    if("$ENV{COMPILER}" STREQUAL "gcc")
      set(CMAKE_C_COMPILER      gcc)
      set(CMAKE_CXX_COMPILER    g++)
    elseif("$ENV{COMPILER}" STREQUAL "clang")
      set(CMAKE_C_COMPILER      clang)
      set(CMAKE_CXX_COMPILER    clang++)
    endif()

In any of the above, you can either specify the full path to the compiler, or just specify the name of the compiler executable (as above), and make sure that the executable is on your PATH.

Last but not least, if you're using GNU autotools -- you're on your own, good luck! The only thing I want to say about autotools is that [I agree with this guy](https://twitter.com/timmartin2/status/23365017839599616).

### Finding libstdc++ at build-time

By default, clang looks for include and library files in the standard system locations (e.g., /usr), regardless of what compiler was used to build clang. (I filed a [bug report](http://llvm.org/bugs/show_bug.cgi?id=20510) for this behavior, but the clang developers apparently feel this is reasonable behavior. Reasonable people may disagree ;-)

The suggested work-around for this is to specify the `--gcc-toolchain` parameter in both the compile and link step. In our case, we took a shortcut when we built clang by specifying the GCC\_INSTALL\_PREFIX setting -- this effectively builds clang with the correct `--gcc-toolchain` setting already "burned in" to clang, so we can omit this setting for our builds.

### Finding libstdc++ at run-time

Any code genrated using clang is also going to need to be able to find the libraries that clang was built with at run-time. There are a couple of ways of doing that:

-   Similar to what we did above when building clang, you can specify the `-Wl,-rpath,` parameter to the linker to set a run path for your executables.
     Note that if you're using cmake, it will [automatically strip the rpath](<http://www.cmake.org/Wiki/CMake_RPATH_handling>) from all files when running `make install`, so you may need to disable that by setting `CMAKE_SKIP_INSTALL_RPATH` to false in your build.

-   Alternatively, you will need to make sure that the proper library directory is on your `LD_LIBRARY_PATH` at run-time. This is the approach we use in my shop -- we have a hard-and-fast rule that application code cannot contain a run path, and we deliberately strip any existing RPATH entries from code that is being deployed to QA and production.

Conclusion
----------

There may be another way to build clang successfully on a RH-based system, but
if there is I've yet to discover it. As mentioned earlier, bits and pieces of
this information have been found in other sources, including the following:

<http://llvm.org/docs/GettingStarted.html#getting-a-modern-host-c-toolchain>

<http://clang-developers.42468.n3.nabble.com/getting-clang-to-find-non-default-libstdc-td3945163.html>

<https://code.google.com/p/memory-sanitizer/wiki/BuildingClangOnOlderSystems>

<http://llvm.org/docs/CMake.html>
 

[^1]: You will need at least version 2.8 of cmake to do the build, which is not native on RH/CentOS 6.  That version can be installed using "Add/Remove Software" or yum.  (Or, of course, you can build it from source).

[^2]: It's also possible to build clang to use the C++ standard library (libc++) that is part of the llvm project, of which clang itself is also a part. That requires a discussion all its own, and we're not going to pursue that further in this post, although I may get around to writing about that at some point.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Into the Void]]></title>
    <link href="http://btorpey.github.io/blog/2014/09/23/into-the-void/"/>
    <updated>2014-09-23T18:13:36-04:00</updated>
    <id>http://btorpey.github.io/blog/2014/09/23/into-the-void</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/m20.jpg" width="385" height="233"> 

I keep reading talk of the sort “I don’t know why anyone bothers
with C++ — real programmers use C.  C++ is for wussies”, or words to that
effect.

Well, a while ago I had to go back to C from working exclusively in C++ for a while, and
I have to say that I think the C fanboys are just nuts.

<!--more-->

The project I’m referring to involved packaging up NYSE’s (now SR Labs') “Mama” middleware so
it could be released as [open source](http://www.openmama.org/), as well as implementing a new transport
adapter for OpenMama using the open-source [Avis](http://avis.sourceforge.net/why_avis.html) transport[^1].

Mama is a high-level API that provides access to a number of middleware
transports, including Tibco Rendezvous, Informatica/29 West LBM and NYSE’s own
Data Fabric middleware.  Mama and Data Fabric are almost exclusively C code,
written back in the days when people avoided C++ because of issues with the
various compilers.  (Does anyone remember the fun we used to have with gcc 2.95
and templates?)

So, at the time using C may have been the right choice, but it’s far from ideal.

Like a lot of C code, what Mama does is encapsulate functionality by using
pointers to opaque structs.  These ”handles” are created by calling API
functions, and then later passed to other API functions to perform actions on
the underlying objects represented by the handles.

This is a very popular idiom, and with good reason — hiding the inner details of
the implementation insulates applications from changes in the implementation.
It’s called [“Bridge”](http://en.wikipedia.org/wiki/Bridge_pattern) by the GOF, and the more 
colorful [“pImpl”](http://www.gotw.ca/gotw/024.htm) by Herb
Sutter.

Of course, in C the typical way to accomplish this is with 
[void](http://stackoverflow.com/questions/1043034/what-does-void-mean-in-c-c-and-c)
 pointers, so the
implementation spends a lot of time casting back and forth between `void*`’s and
“real” pointers.  With, of course, absolutely no error checking by the compiler.

For example, in the Avis protocol bridge that I implemented for the initial
release of OpenMama, there are a bunch of macros that look like this:

	#define avisPublisher(publisher) ((avisPublisherBridge*) publisher)

Elsewhere, the code that uses the macro:

        mamaMsg_updateString(msg, SUBJECT_FIELD_NAME, 0, avisPublisher(publisher)->mSubject);


Gee, wouldn’t it be nice to be able to define these handles in such a way that
they would be opaque to the applications using the API, but the compiler could
still enforce type-checking?  Not to mention not having to cast back and forth
between `void*`’s and actual types?

Never mind virtual functions, forget streams (please!) and the STL, ditto templates and
operator overloading — if there’s one overriding reason to prefer C++ over C,
it’s the compiler’s support for separating interface from implementation that is
completely lacking in C.

You see this same “handle” pattern everywhere in C, and it’s “good” C code just
because it’s the best that can be done, but if a programmer wrote that code in
C++ he’d be laughed out of the building (and rightly so).

Has C++ become big and complicated?  Sure.  Is the syntax sometimes capricious
and counter-intuitive?  Absolutely.

But, at least for me, if I never see another `void*` as long as I live, that won’t
be too long for me.

[^1]: Don't ask.  Let's just say it wasn't my decision.  If you want to check out OpenMama, I would suggest using [Qpid/AMQP](http://qpid.apache.org/proton/) instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using clang's Address Sanitizer (without clang)]]></title>
    <link href="http://btorpey.github.io/blog/2014/03/27/using-clangs-address-sanitizer/"/>
    <updated>2014-03-27T08:30:22-04:00</updated>
    <id>http://btorpey.github.io/blog/2014/03/27/using-clangs-address-sanitizer</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://planet.clang.org/images/DragonSmall.png"> 

Valgrind has been an indispensable tool for C/C++ programmers for a long
time, and I've used it quite happily -- it's a tremendous tool for doing dynamic
analysis of program behavior at run time. valgrind[^3] can detect reads of
uninitialized memory, heap buffer overruns, memory leaks, and other errors that
can be difficult or impossible to find by eyeballing the code, or by static
analysis tools.  But that comes with a price, which in some cases can be quite steep, and some new
tools promise to provide some or all of the functionality valgrind provides without the drawbacks.

<!--more-->

For one thing, valgrind can
be *extremely* slow.  That is an unavoidable side-effect of one of valgrind's
strengths, which is that it doesn't require that the program under test be
instrumented beforehand -- it can analyze any executable (including shared
objects) "right out of the box".  That works because valgrind effectively
emulates the hardware the program runs on, but that leads to a potential
problem: valgrind instruments *all* the code, including shared objects --and
that includes third-party code (e.g., libraries, etc.) that you may not have any
control over.

In my case, that ended up being a real problem.  The main reason
being that a significant portion of the application I work with is hosted in a
JVM (because it runs in-proc to a Java-based FIX engine, using a thin JNI
layer).  The valgrind folks say that the slowdown using their tool can be up to
20x, but it seemed like more, because the entire JVM was being emulated.

And, because valgrind emulates *everything*, it also detects and reports
problems in the JVM itself.  Well, it turns out that the JVM plays a lot of
tricks that valgrind doesn't like, and the result is a flood of complaints that
overwhelm any potential issues in the application itself.

So, I was very interested in learning about a similar technology that promised
to address some of these problems.  Address Sanitizer (Asan from here on) was
originally developed as part of the clang project, and largely by folks at Google.
They took a different approach: while valgrind emulates the machine at run-time, Asan works by instrumenting
the code at compile-time.

That helps to solve the two big problems that I was having with valgrind: its
slowness, and the difficulty of excluding third-party libraries from the
analysis.

Asan with clang
---------------

Since I was already building the application using clang for its excellent
diagnostics and static analysis features, I thought it would be relatively
straightforward to introduce the Asan feature into the build.  Turns out there
is a bump in that road: clang's version of Asan is supplied only as a
static library that is linked into the main executable.  And while it should be
possible to re-jigger things to make it work as a shared library, that would
turn into a bit of science project.  That, and the fact that the wiki page discussing it
(http://code.google.com/p/address-sanitizer/wiki/AsanAsDso) didn't sound
particularly encouraging ("however the devil is in the detail" -- uhh, thanks, no).

Rats!  However, the wiki page
did mention that there was a version of Asan that worked with gcc, and that
version apparently did support deployment as a shared object.  So, I decided to give that a try...

Asan with gcc
-------------

It turns out that the gcc developers haven't been sitting still -- in
fact, it looks like there is a bit of a healthy rivalry between the clang and gcc
folks, and that's a good thing for you and me.  Starting with version 4.8 of the
gcc collection, Asan is available with gcc as well.[^2]

Getting the latest gcc version (4.8.2 as of this writing), building and
installing it was relatively straight-forward.  By default, the source build
installs into /usr/local, so it can co-exist nicely with the native gcc for the
platform (in the case of Red Hat/CentOS 6.5, that is the relatively ancient gcc
4.4 branch).

Building with Asan
-------------
Including support for Asan in your build is pretty simple -- just include the `-fsanitize=address`
flag in both the compile and link step.  (Note that this means you need to invoke the linker via the compiler
driver, rather than directly.  In practice, this means that the executable you specify for the link step should be 
g++ (or gcc), not ld).  

While not strictly required, it's also a very good idea to include the `-fno-omit-frame-pointer` flag
in the compile step.  This will prevent the compiler from optimizing away the frame pointer (ebp) register.  While
disabling any optimization might seem like a bad idea, in this case the performance benefit is likely minimal at best[^5], but the 
inability to get accurate stack frames is a show-stopper.

Running with Asan
-------------
If you're checking an executable that you build yourself, the prior steps are all you need -- libasan.so will get linked
into your executable by virtue of the `-fsanitize=address` flag.

In my case, though, the goal was to be able to instrument code running in the JVM.  In this case, I had to force libasan.so
into the executable at runtime using `LD_PRELOAD`, like so:

`LD_PRELOAD=/usr/local/lib64/libasan.so.0 java ...`

And that's it!

Tailoring Asan
---------------

There are a bunch of options available to tailor the way Asan works: at compile-time you can supply a "blacklist" of functions that
Asan should NOT instrument, and at run-time you can further customize Asan using the `ASAN_OPTIONS` environment variable, which
is discussed [here](<http://code.google.com/p/address-sanitizer/wiki/Flags>).
 
By default, Asan is silent, so you may not be certain that it's actually working unless it aborts with an error, which would look like
[one of these](http://en.wikipedia.org/wiki/AddressSanitizer#Examples").

You can check that Asan is linked in to your executable using ldd:

<pre>
$ ldd a.out
	linux-vdso.so.1 =>  (0x00007fff749ff000)
	libasan.so.0 => /usr/local/lib64/libasan.so.0 (0x00007f57065f7000)
	libstdc++.so.6 => /usr/local/lib64/libstdc++.so.6 (0x00007f57062ed000)
	libm.so.6 => /lib64/libm.so.6 (0x0000003dacc00000)
	libgcc_s.so.1 => /usr/local/lib64/libgcc_s.so.1 (0x00007f57060bd000)
	libc.so.6 => /lib64/libc.so.6 (0x0000003dad000000)
	libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003dad800000)
	libdl.so.2 => /lib64/libdl.so.2 (0x0000003dad400000)
	/lib64/ld-linux-x86-64.so.2 (0x0000003dac800000)
</pre>

You can also up the default verbosity level of Asan to get an idea of what is going on at run-time:

`export ASAN_OPTIONS="verbosity=1:..."`


If you're using `LD_PRELOAD` to inject Asan into an executable that was not built
using Asan, you may see output that looks like the following:

<pre>
==25140== AddressSanitizer: failed to intercept 'memset'
==25140== AddressSanitizer: failed to intercept 'strcat'
==25140== AddressSanitizer: failed to intercept 'strchr'
==25140== AddressSanitizer: failed to intercept 'strcmp'
==25140== AddressSanitizer: failed to intercept 'strcpy'
==25140== AddressSanitizer: failed to intercept 'strlen'
==25140== AddressSanitizer: failed to intercept 'strncmp'
==25140== AddressSanitizer: failed to intercept 'strncpy'
==25140== AddressSanitizer: failed to intercept 'pthread_create'
==25140== AddressSanitizer: libc interceptors initialized
</pre>

Don't worry -- it turns out that is a bogus warning related to running Asan as a shared object.  Unfortunately, the Asan
developers don't seem to want to fix this (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58680).    

Conclusion
----------

So, how did this all turn out?  Well, it's pretty early in the process, but Asan
has already caught a memory corruption problem that would have been extremely
difficult to track down otherwise.  (Short version is that due to some
unintended name collissions between shared libraries, we were trying to put 10
pounds of bologna in a 5 pound sack.  Or, as one of my colleagues more accurately pointed out, 8 pounds
of bologna in a 4 pound sack ;-)

valgrind is still an extremely valuable tool, especially because of its
convenience and versatility; but in certain edge cases Asan can bring things to
the table, like speed and selectivity, that make it the better choice.

Postscript 
-----------

Before closing there are a few more things I want to mention about Asan in
comparison to valgrind:

-   If you look at the processes using Asan with top, etc. you may be a bit
    shocked at first to see they are using 4TB (or more) of memory.  Relax --
    it's not real memory, it's virtual memory (i.e., address space).  The
    algorithm used by Asan to track memory "shadows" actual memory (one bit for
    every byte), so it needs that whole address space.  Actual memory use is
    greater with Asan as well, but not nearly as bad as it appears at first
    glance.  Even so, Asan disables core files by default, at least in 64-bit
    mode.

-   As hoped, Asan is way faster than valgrind, especially in my "worst-case"
    scenario with the JVM, since the only code that's paying the price of
    tracking memory accesses is the code that is deliberately instrumented.
    That also eliminates false positives from the JVM, which is a very good
    thing.

-   As for false positives, the Asan folks apparently don't believe in them,
    because there is no "suppression" mechanism like there is in valgrind.
    Instead, the Asan folks ask that if you find what you think is a false
    positive, you file a bug report with them.  In fact, when Asan finds a
    memory error it immediately aborts -- the rationale being that allowing Asan
    to continue after a memory error would be much more work, and would make
    Asan much slower.  Let's hope they're right about the absence of false
    positives, but even so this "feature" is bound to make the debug cycle
    longer, so there are probably cases where valgrind is a better choice -- at
    least for initial debugging.
    
-   Asan and valgrind have slightly different capabilities, too:

    -   Asan can find stack corruption errors, while valgrind only tracks heap
        allocations.

    -   Both valgrind and Asan can detect memory leaks (although Asan's leak
        checking support is "still experimental" - see
        <http://code.google.com/p/address-sanitizer/wiki/LeakSanitizer>).

    -   valgrind also detects reads of un-initialized memory, which Asan does
        not.

        -   The related [Memory Sanitizer](https://code.google.com/p/memory-sanitizer/wiki/MemorySanitizer)
            tool apparently can do that.  It has an additional restriction that
            the main program must be built with -fpie to enable
            position-independent code, which may make it difficult to use in
            certain cases, e.g. for debugging code hosted in a JVM.

A detailed comparison of Asan, valgrind and other tools can be found [here](<http://code.google.com/p/address-sanitizer/wiki/ComparisonOfMemoryTools>).


Resources
--------------------

<http://en.wikipedia.org/wiki/AddressSanitizer>

http://code.google.com/p/address-sanitizer/

http://clang.llvm.org/docs/AddressSanitizer.html



[^3]: In this paper, I use the term valgrind, but I really mean valgrind with the memcheck tool.  valgrind includes a bunch of other tools as well -- see <http://valgrind.org> for details.

[^2]: As is another tool, the Thread Sanitizer, which detects data races between threads at run-time.  More on that in an upcoming post.

[^5]: Omitting the frame pointer makes another register (ebp) available to the compiler, but since there are already at least a dozen other registers for the compiler to use, this extra register is unlikely to be critical.  The compiler can also omit the code that saves and restores the register, but that's a couple of instructions moving data between registers and L1 cache. 
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Singleton's]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/12/shared-singletons/"/>
    <updated>2014-02-12T17:53:36-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/12/shared-singletons</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/caddyshack-11.jpg" width="320" height="240">

Singleton’s are kind of like Rodney Dangerfield – they don’t get no respect. And
yet, there are scenarios where a singleton is just the ticket – for instance,
when a relatively expensive and/or long-lived resource needs to be shared among
a number of independent threads.

shared_ptr's can help make this easier and less error-prone, but even so there are some 
edge cases that need to be considered.

<!--more-->

In our case, we had a need for a singleton object to refer to a middleware
connection which was being shared across a large number of child objects, which
were in turn being manipulated on a number of different threads.

In our case, we also wanted lazy initialization (construct on first use), and to
clean up the singleton properly when the code was done using it. Since the
creation and destruction order of the using objects is not deterministic, the
obvious solution is to use reference counting to manage the singleton’s lifetime,
and the simplest way to do that is to use [shared_ptr’s](<http://www.cplusplus.com/reference/memory/shared_ptr/>).

shared_ptr’s were introduced in Boost, and were subsequently adopted by the C++
standards committee as part of the base language with the tr1 and C++0x
standards. As such, they have been widely supported (think gcc and MS compilers)
for a while now.

One of the “magic” qualities of shared_ptr’s is that all shared_ptr’s that point
to the same thing (what I’m going to refer to as a “target” from here on) share
a single reference count (hence the “shared” part of the name), so as individual
shared_ptr’s go out of scope, the reference counter on the target itself is
automatically decremented, and the target is deleted when its reference count
goes to zero.

However, as we’ll see, there are some fine points that need to be considered
even in this relatively simple case.

Our first attempt looked something like this:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart1.cpp)</span> <a href='/downloads/code/smart/smart1.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">static</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


The implementation constructs the singleton into a class-static shared_ptr on
the first call to getShared(), and then hands out copies of the shared_ptr to
each caller. When run, the following output is produced:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart1.out)</span> <a href='/downloads/code/smart/smart1.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b9010</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x154b9030</span>
</span><span class='line'><span class="go">	after	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b90a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 2</span>
</span><span class='line'><span class="go">	after	copy: 3	master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b9010</span>
</span><span class='line'><span class="go">	before	copy: 3	master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b90a0</span>
</span><span class='line'><span class="go">	before	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x154b90a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 1</span>
</span><span class='line'><span class="go">	after	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x154b90a0</span>
</span><span class='line'><span class="go">	before	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Exiting main</span>
</span><span class='line'><span class="go">SharedClass dtor:0x154b9030</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

This implementation works, but with one major caveat: as you can see from the
output, the shared_ptr’s get an initial reference count of two – one for the
creation of the singleton itself, and one for the copy of the shared_ptr that is
returned from getShared.

This means that the singleton will not actually be deleted until after returning
from main(), which is when static objects get deleted. (For more information on
why this is so, see section 3.6.3 of the C++ standard).[^2] In many cases, that
would not be a problem, but in our case the middleware connection to which the
shared_ptr’s refer gets cleaned up in the main thread prior to returning, and so
the final destructor referred to an object that was no longer valid.

Another issue has to do with RAII [^1] – if you're relying on the destruction
of the target to release resources, the fact that the target is effectively
never deleted is a potential problem.

Last but not least is the issue of overall tidiness – given that the shared
object is allocated within the scope of main(), it just seems wrong to let it go
out of scope after main() exits. Ideally, we’d like to destroy the shared object
prior to returning from main(), but how to do that?

Our next attempt looks like this:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart2.cpp)</span> <a href='/downloads/code/smart/smart2.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">static</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">masterPtr</span><span class="p">.</span><span class="n">unique</span><span class="p">())</span>
</span><span class='line'>      <span class="n">masterPtr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

In the destructor for the container class, we first reset() the container’s copy
of the shared_ptr. This reduces its reference count to zero, and also decrements
the reference counter on the static shared_ptr that was initialized when the
singleton was created. (The destructor of the container’s copy of the shared_ptr
will still be executed on return from the container’s destructor, but since the
reference count is already zero, it will do nothing).

Then we test the static shared_ptr to see if it’s reference count is equal to
one (by calling unique()), and if it is we call reset on it to decrement its
reference count once again, which ends up deleting the singleton (since the
reference count is now zero).

When we run this version of the code, we see the following output:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart2.out)</span> <a href='/downloads/code/smart/smart2.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f010</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x642f030</span>
</span><span class='line'><span class="go">	after	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f0a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 2</span>
</span><span class='line'><span class="go">	after	copy: 3	master: 3</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f010</span>
</span><span class='line'><span class="go">	before	copy: 3	master: 3</span>
</span><span class='line'><span class="go">	after	copy: 0	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f0a0</span>
</span><span class='line'><span class="go">	before	copy: 2	master: 2</span>
</span><span class='line'><span class="go">SharedClass dtor:0x642f030</span>
</span><span class='line'><span class="go">	after	copy: 0	master: 0</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x642f0a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x642f030</span>
</span><span class='line'><span class="go">	after	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x642f0a0</span>
</span><span class='line'><span class="go">	before	copy: 2	master: 2</span>
</span><span class='line'><span class="go">SharedClass dtor:0x642f030</span>
</span><span class='line'><span class="go">	after	copy: 0	master: 0</span>
</span><span class='line'>
</span><span class='line'><span class="go">Exiting main</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

We can see that the singleton does in fact get destroyed prior to returning from
main(), which is what we want. We also see that the singleton gets destroyed
when nobody is using it, and automatically gets recreated if needed, which is
all well and good.

But, the code to make this happen does seem a bit messy, and potentially
unclear. Surely, there’s a better way to get the behavior we want without having
to directly manipulate reference counts.

Which brings us to shared_ptr’s cousin, the weak_ptr. A weak_ptr is similar to a
shared_ptr, except that assigning to a weak_ptr does not increment the shared
reference count:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart3.cpp)</span> <a href='/downloads/code/smart/smart3.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;tr1/memory&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">tr1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SharedClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">SharedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SharedClass</span><span class="o">::~</span><span class="n">SharedClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;SharedClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ContainerClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="o">~</span><span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">memberPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">static</span> <span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>  <span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">weak_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span>   <span class="n">ContainerClass</span><span class="o">::</span><span class="n">masterPtr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">ContainerClass</span><span class="o">::</span><span class="n">getShared</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">SharedClass</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">temp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">SharedClass</span><span class="p">());</span>
</span><span class='line'>      <span class="n">masterPtr</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass ctor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">memberPtr</span> <span class="o">=</span> <span class="n">getShared</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">after</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ContainerClass</span><span class="o">::~</span><span class="n">ContainerClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ContainerClass dtor:&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">before</span><span class="se">\t</span><span class="s">copy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">memberPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;master: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">masterPtr</span><span class="p">.</span><span class="n">use_count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Entering main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass1</span><span class="p">;</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ContainerClass</span><span class="o">*</span> <span class="n">pClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContainerClass</span><span class="p">();</span>
</span><span class='line'>   <span class="k">delete</span> <span class="n">pClass3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exiting main&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

In this version, we change the code to use a weak_ptr instead of a shared_ptr
for the static class member that is initialized on creation of the singleton
object, and we remove the fiddling with reference counts that we had to do make
things come out right in the previous example.

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (smart3.out)</span> <a href='/downloads/code/smart/smart3.out'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Entering main</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf8010</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x18bf8030</span>
</span><span class='line'><span class="go">	after	copy: 1	master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf80a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 1</span>
</span><span class='line'><span class="go">	after	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf8010</span>
</span><span class='line'><span class="go">	before	copy: 2	master: 2</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf80a0</span>
</span><span class='line'><span class="go">	before	copy: 1	master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">SharedClass dtor:0x18bf8030</span>
</span><span class='line'><span class="go">ContainerClass ctor:0x18bf80a0</span>
</span><span class='line'><span class="go">	before	copy: 0	master: 0</span>
</span><span class='line'><span class="go">SharedClass ctor:0x18bf8030</span>
</span><span class='line'><span class="go">	after	copy: 1	master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">ContainerClass dtor:0x18bf80a0</span>
</span><span class='line'><span class="go">	before	copy: 1	master: 1</span>
</span><span class='line'>
</span><span class='line'><span class="go">SharedClass dtor:0x18bf8030</span>
</span><span class='line'><span class="go">Exiting main</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Et voila – we can see that the behavior is exactly what we wanted, but without
the need to manipulate reference counts directly. Not to mention, the behavior
is a bit more like what one would expect (e.g., member variables get destroyed
on exit from the destructor, not in the body of the destructor).

### Acknowledgements

Thanks to the folks at cplusplus.com, especially “simeonz” for
[this post](<http://www.cplusplus.com/forum/general/37113/>), which discusses the
general problem and provides a nice code example that I used as the basis for
this discussion.


[^1]: <http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization>

[^2]: A free copy of the most recent working draft can be downloaded [here](<http://isocpp.org/files/papers/N3690.pdf>).
</p>
]]></content>
  </entry>
  
</feed>
