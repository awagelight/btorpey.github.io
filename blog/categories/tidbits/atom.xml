<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tidbits | Confessions of a Wall Street Programmer]]></title>
  <link href="http://btorpey.github.io/blog/categories/tidbits/atom.xml" rel="self"/>
  <link href="http://btorpey.github.io/"/>
  <updated>2014-04-02T18:02:38-04:00</updated>
  <id>http://btorpey.github.io/</id>
  <author>
    <name><![CDATA[Bill Torpey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You may ask yourself - "How did I get here?"]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/13/how-did-i-get-here/"/>
    <updated>2014-02-13T18:02:27-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/13/how-did-i-get-here</id>
    <content type="html"><![CDATA[<p>In addition to being a great line from David Byrne and Talking Heads (from "Life
During Wartime"), this is also a question I often ask myself when
looking at log files. Today's tip is worth the price of the whole blog (i.e.,
free), but I predict that you'll be glad you know it.

<!--more-->

It's pretty common to pipe the output of a command, or string of commands, to a
file to have a record of what happened when executing the command, something
like this:

`big_gnarly_command_line_with_options 2>&1 | tee logfile.out`

That works great for capturing the *output* of the command, but what about the
big_gnarly_command_line_with_options itself?

Try this instead:

` bash -x -c "big_gnarly_command_line_with_options" 2>&1 | tee logfile.out`


Now, your output file will look like this:

`+ big_gnarly_command_line_with_options`<br>
`... output of big_gnarly_command_line_with_options ...`

If your gnarly command is actually several gnarly commands, enclose the whole
gnarly list in parentheses and separate with semicolons (or &&), like so:

` bash -x -c "(big_gnarly_command_line_with_options_1;
big_gnarly_command_line_with_options_2)" 2>&1 | tee logfile.out`

Normal quoting rules apply:

-   If you enclose the command(s) in double-quotes ("), variable substitution
    will be done on the command line

-   If you need to include a double-quote within double-quotes, you need to
    escape it (with the backslash (\\) character)

-   If you enclose the command line(s) in single quotes ('), no variable
    substitution is done

-   There is no way to include a single-quote within single-quotes, but there is
    a trick that gives a similar effect, that you can read about here (<http://stackoverflow.com/a/1250279/203044>).

Now you'll never need to ask yourself "How did I get here"?

  
  

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIXing less]]></title>
    <link href="http://btorpey.github.io/blog/2014/02/10/fixing-less/"/>
    <updated>2014-02-10T08:37:11-05:00</updated>
    <id>http://btorpey.github.io/blog/2014/02/10/fixing-less</id>
    <content type="html"><![CDATA[<p>Here's a handy tip for those who (like me) spend a fair amount of time staring
at FIX logs.

<!--more-->

FIX may be the protocol that everybody loves to hate, but it doesn't look like it's
going anywhere, so I guess we all just need to get over it and learn to live with it.

One of the things that is hard to live with, though -- at least for me -- is the
visual cacophony that results when browsing FIX logs with less.
<img class="center" src="/images/less-before.png"> 

It turns out that it's possible to control how less displays the x'01'
delimiters to make this chore a little easier on the eyes.  In my case, I
use the following in my .bash_profile:

`export LESSBINFMT="*u%x"`

This dials down the visual clutter to a level that I find much easier to deal
with.
<img class="center" src="/images/less-after.png"> 


(Note that the man page for less mentions that it's possible to display the hex codes in square brackets, but I have not found that to work on any of the systems where I've tried it -- YMMV).
</p>
]]></content>
  </entry>
  
</feed>
